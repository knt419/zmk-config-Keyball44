#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        BSDEL: BSDEL {
            compatible = "zmk,behavior-mod-morph";
            label = "BSDEL";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lt_bsdel: lt_bsdel {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_BSDEL";
            bindings = <&mo>, <&BSDEL>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
        };

        holdtap: holdtap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        win_mv_right {
            bindings = <&winmvright>;
            key-positions = <8 9>;
            slow-release;
            layers = <0>;
        };

        win_mv_left {
            bindings = <&winmvleft>;
            key-positions = <7 8 9>;
            slow-release;
            layers = <0>;
        };

        semicolon {
            bindings = <&kp SEMI>;
            key-positions = <21 22>;
            layers = <0>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <19 20>;
            layers = <0>;
        };

        braces {
            bindings = <&braces>;
            key-positions = <2 3>;
        };

        brackets {
            bindings = <&brackets>;
            key-positions = <26 27>;
        };

        parenthesis {
            bindings = <&parenthesis>;
            key-positions = <14 15>;
        };
    };

    macros {
        DBLSFT: DBLSFT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT &kp LEFT_SHIFT>;
            label = "DBLSFT";
        };

        DBLCTL: DBLCTL {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp LCTRL>;
            label = "DBLCTL";
        };

        winmvright: winmvright {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI &kp RIGHT>,
                <&macro_release>,
                <&kp RIGHT &kp LEFT_WIN>;

            label = "WINMVRIGHT";
        };

        winmvleft: winmvleft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI &kp LEFT>,
                <&macro_release>,
                <&kp LEFT &kp LEFT_WIN>;

            label = "WINMVLEFT";
        };

        at: at {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp AT_SIGN>;
            label = "AT";
        };

        hash: hash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp HASH>;
            label = "HASH";
        };

        amp: amp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp AMPERSAND>;
            label = "AMP";
        };

        dollar: doller {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp DOLLAR>;
            label = "DOLLER";
        };

        backquote: backquote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp GRAVE>;
            label = "BACKQUOTE";
        };

        quote: quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp SINGLE_QUOTE>;
            label = "QUOTE";
        };

        doublequote: doublequote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp DOUBLE_QUOTES>;
            label = "DOUBLEQUOTE";
        };

        caret: caret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp CARET>;
            label = "CARET";
        };

        pipe: pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp PIPE>;
            label = "PIPE";
        };

        parenthesis: parenthesis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT_ARROW>;
            label = "PARENTHESIS";
        };

        brackets: brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "BRACKETS";
        };

        braces: braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "BRACES";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&lt 6 ESCAPE    &kp Q               &kp W       &kp MINUS             &kp R                    &holdtap LC(Z) Z                     &holdtap LC(X) X  &kp D  &holdtap LG(E) E  &kp L                 &kp P             &kp SQT
&mt LCTRL TAB   &kp I               &kp T       &holdtap LC(A) A      &kp K                    &kp G                                &kp H             &kp N  &kp O             &kp U                 &holdtap LC(S) S  &kp SEMICOLON
&kp LEFT_SHIFT  &kp F               &kp PERIOD  &holdtap LC(C) C      &kp M                    &kp B                                &kp J             &kp Y  &holdtap LC(V) V  &holdtap LG(V) COMMA  &kp SLASH         &kp BACKSLASH
&mkp RCLK       &mt LEFT_ALT LANG2  &mkp LCLK   &mt LEFT_SHIFT SPACE  &mt LEFT_GUI LANGUAGE_1                        &lt_bsdel 5 0  &lt 4 ENTER                                                      &kp PRINTSCREEN
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans     &trans  &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans     &trans  &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &mkp LCLK  &mo 2   &mkp MCLK  &mkp RCLK  &trans
&trans  &trans  &trans  &mo 2   &mo 3               &trans  &trans                                &trans
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans              &trans  &trans                          &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans              &trans  &trans                          &trans
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&kp LEFT_BRACE        &kp ASTERISK  &kp NUMBER_7  &kp NUMBER_8          &kp NUMBER_9         &kp PLUS                 &kp TILDE        &backquote  &quote  &doublequote  &caret     &kp RIGHT_BRACE
&kp LEFT_PARENTHESIS  &kp SLASH     &kp NUMBER_4  &kp NUMBER_5          &kp NUMBER_6         &kp MINUS                &kp LEFT         &kp DOWN    &kp UP  &kp RIGHT     &pipe      &kp RIGHT_PARENTHESIS
&kp LEFT_BRACKET      &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2          &kp NUMBER_3         &kp PERCENT              &kp EXCLAMATION  &at         &hash   &amp          &dollar    &kp RIGHT_BRACKET
&DBLCTL               &DBLSFT       &mkp RCLK     &mt LEFT_SHIFT EQUAL  &mt LEFT_ALT PERIOD                   &trans  &trans                                             &kp UNDER
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&trans  &trans  &kp F7     &kp F8     &kp F9     &kp LG(V)              &kp INS   &kp DEL        &kp PRINTSCREEN  &kp PAUSE_BREAK  &trans  &trans
&trans  &trans  &kp F4     &kp F5     &kp F6     &kp LC(C)              &kp HOME  &kp PAGE_DOWN  &kp PG_UP        &kp END          &trans  &trans
&trans  &trans  &kp F1     &kp F2     &kp F3     &kp LC(V)              &trans    &trans         &trans           &trans           &trans  &trans
&trans  &trans  &mkp MCLK  &kp LC(Z)  &kp LC(Y)                 &trans  &trans                                                     &trans
            >;
        };

        system_layer {
            bindings = <
&trans       &trans        &trans        &trans        &trans        &out OUT_USB              &out OUT_USB  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4              &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&bootloader  &trans        &trans        &trans        &trans        &out OUT_BLE              &out OUT_BLE  &trans        &trans        &trans        &trans        &bootloader
&trans       &trans        &trans        &trans        &trans                          &trans  &trans                                                  &trans
            >;

            label = "SYS";
        };
    };
};
